import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import joblib



df = pd.read_csv("Churn_Modelling.csv")

print(df.head())  
print(df.info())  
print(df.describe())  
print(df.isnull().sum())  


from sklearn.preprocessing import LabelEncoder


encoder = LabelEncoder()
df['Geography'] = encoder.fit_transform(df['Geography'])  
df['Gender'] = encoder.fit_transform(df['Gender'])  



scaler = StandardScaler()
df[['CreditScore', 'Age', 'Balance', 'EstimatedSalary']] = scaler.fit_transform(
    df[['CreditScore', 'Age', 'Balance', 'EstimatedSalary']]
)

df = df.drop(columns=['RowNumber', 'CustomerId', 'Surname'])  



X = df.drop(columns=['Exited']) 
y = df['Exited']  
print(df.columns)  


columns_to_drop = ['RowNumber', 'CustomerId', 'Surname']


df = df.drop(columns=[col for col in columns_to_drop if col in df.columns], errors='ignore')



X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)


models = {
    "Logistic Regression": LogisticRegression(),
    "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
    "Gradient Boosting": GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, random_state=42)
}


results = {}

for name, model in models.items():
    model.fit(X_train, y_train)  
    y_pred = model.predict(X_test) 
    accuracy = accuracy_score(y_test, y_pred)  
    results[name] = accuracy  
    print(f"\n{name} Accuracy: {accuracy:.4f}")
    print(classification_report(y_test, y_pred))  


param_grid = {
    'n_estimators': [50, 100, 150],
    'learning_rate': [0.01, 0.1, 0.2],
    'max_depth': [3, 5, 7]
}

grid_search = GridSearchCV(GradientBoostingClassifier(), param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train, y_train)

print("\nBest Hyperparameters for Gradient Boosting:", grid_search.best_params_)
print("Best Accuracy:", grid_search.best_score_)


best_gb = grid_search.best_estimator_ 
importance = best_gb.feature_importances_  
feature_names = X.columns
feature_importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': importance})
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)


plt.figure(figsize=(10, 5))
sns.barplot(x=feature_importance_df['Importance'], y=feature_importance_df['Feature'])
plt.title("Feature Importance (Gradient Boosting)")
plt.show()


joblib.dump(best_gb, "churn_prediction_model.pkl")
print("\nModel saved as churn_prediction_model.pkl")


model = joblib.load("churn_prediction_model.pkl")
sample_data = np.array(X_test.iloc[0]).reshape(1, -1) 
predicted_churn = model.predict(sample_data)
print("\nSample Prediction:", "Churn" if predicted_churn[0] == 1 else "Not Churn")
